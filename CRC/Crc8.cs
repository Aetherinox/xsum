/*
	@Title		: Algorithms > CRC
	@Website	: https://github.com/Aetherinox/xsum-shahash-utility
	@Authors	: Aetherinox
                : Steve Whitley

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

#region "Using"

using System;
using System.Drawing;
using static Aetherx.Algo.Crc8;

#endregion

namespace Aetherx.Algo
{

    public static class Crc8
    {

        /*
            Algo-8 Tab Standard
        */

		internal static class Standard
		{

            static byte[] table =
            {
                0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
                0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
                0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
                0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
                0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2, 0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,
                0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
                0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,
                0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42, 0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,
                0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
                0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,
                0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C, 0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,
                0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
                0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,
                0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
                0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
                0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3,
            };

		    private const ushort StartValue	    = ushort.MinValue;

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( params byte[] b )
		    {
			    return ComputeInternal ( b, 0, b?.Length ?? 0 );
		    }

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( byte[] b, int start, int len, ushort initialValue = StartValue )
		    {
                if ( b == null )        { throw new ArgumentNullException ( nameof ( b ) ); }
                if ( b.Length == 0 )    { throw new ArgumentOutOfRangeException ( nameof ( b ) ); }
                if ( start < 0 )        { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                if ( start >= b.Length && len > 1 ) { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                var crc     = initialValue;
                var end     = start + len - 1;

                if ( end > b.Length )   { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }
                if ( len < 0 )          { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }

                for ( int i = start; i <= end; ++i )
                {
                    crc = table[ crc ^ b[ i ] ];
                }

                return crc;
		    }
	    }

        /*
            Algo-8 DVBS2
        */

		internal static class DVBS2
		{

            static byte[] table =
            {
                0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D, 
                0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
                0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
                0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
                0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
                0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
                0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
                0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
                0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
                0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
                0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
                0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
                0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
                0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
                0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
                0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9
            };

		    private const ushort StartValue		    = ushort.MinValue;

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( params byte[] b )
		    {
			    return ComputeInternal ( b, 0, b?.Length ?? 0 );
		    }

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( byte[] b, int start, int len, ushort initialValue = StartValue )
		    {
                if ( b == null )        { throw new ArgumentNullException ( nameof ( b ) ); }
                if ( b.Length == 0 )    { throw new ArgumentOutOfRangeException ( nameof ( b ) ); }
                if ( start < 0 )        { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                if ( start >= b.Length && len > 1 ) { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                var crc     = initialValue;
                var end     = start + len - 1;

                if ( end > b.Length )   { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }
                if ( len < 0 )          { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }

                for ( int i = start; i <= end; ++i )
                {
                    crc = table[ crc ^ b[ i ] ];
                }

                return crc;
		    }
	    }

        /*
            Algo-8 MAXIM
        */

		internal static class Maxim
		{

            static ushort[] table =
            {
              0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
              0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
              0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
              0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
              0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
              0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
              0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
              0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
              0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
              0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
              0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
              0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
              0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
              0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
              0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
              0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
            };

		    private const ushort StartValue	    = ushort.MinValue;

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( params byte[] b )
		    {
			    return ComputeInternal ( b, 0, b?.Length ?? 0 );
		    }

            /*
                Compute > Internal
            */

		    internal static ushort ComputeInternal ( byte[] b, int start, int len, ushort initialValue = StartValue )
		    {
                if ( b == null )        { throw new ArgumentNullException ( nameof ( b ) ); }
                if ( b.Length == 0 )    { throw new ArgumentOutOfRangeException ( nameof ( b ) ); }
                if ( start < 0 )        { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                if ( start >= b.Length && len > 1 ) { throw new ArgumentOutOfRangeException ( nameof ( start ) ); }

                var crc     = initialValue;
                var end     = start + len - 1;

                if ( end > b.Length )   { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }
                if ( len < 0 )          { throw new ArgumentOutOfRangeException ( nameof ( len ) ); }

                for ( int i = start; i <= end; ++i )
                {
                    crc = table[ crc ^ b[ i ] ];
                }

                return crc;
		    }
	    }

        /*
            CRC-8 > Compute

            var text            = "Message";
            var text_bytes      = System.Text.Encoding.UTF8.GetBytes ( text );
            var text_crc        = Aetherx.Algo.Crc8.ComputeHash ( CRC8.Standard, text_bytes );
            Console.WriteLine   ( "Text Algo: {0:X3}", text_crc );
        */

        #region "Compute Checksum"

            /*
                Compute > Checksum
            */

            public static long ComputeHash ( CRC8 algo, params byte[] b )
            {
                return ComputeHash ( algo, b, 0, b?.Length ?? 0 );
            }

            /*
                Compute > Checksum
            */

            public static long ComputeHash ( CRC8 algo, byte[] b, int start, int len )
            {
			    switch ( algo )
			    {
				    case CRC8.Standard:
					    return Standard.ComputeInternal ( b, start, len );

				    case CRC8.DVBS2:
					    return DVBS2.ComputeInternal ( b, start, len );

				    case CRC8.Maxim:
					    return Maxim.ComputeInternal ( b, start, len );
			    }

			    throw new ThrowException ( "Unknown Algorithm" );
		    }

        #endregion

    }
}
